#!/usr/bin/env bash

# DMENU-EDITOR-HISTORY
# --------------------

# Bash script that provides an awesome editor-indepentend history list of
# opened files, via dmenu. See --help for details.

# CONFIGURATION -----------------------------------------------------------------

cmd_editor=(subl)
cmd_dmenu=(fzfmenu "--prompt='Hist > '")

cmd_find=(find "$HOME")
indc_find='--- SEARCH ---'

# Indicators for special file types
indc_dir='[DIR]' # directories
indc_link='[LNK]' # symbolic links

# -------------------------------------------------------------------------------

err() {
    printf "ERROR: $1!\n" 1>&2
    exit 1
}

# File to store history in
if [[ -d $XDG_CACHE_HOME ]]; then
    hist="$XDG_CACHE_HOME/dmenu-editor-history"
else
    hist="$HOME/.dmenu-editor-history"
fi
[[ -f $hist ]] || touch "$hist"

temp='/tmp/dmenu-editor-history-tmp'

entry() {
    # New history entry
    # $1 = absolute path to a file

    printf '%s\n' "$1" > "$temp"

    # Previous history without duplicate of new entry
    dup_found=0
    while read; do
        if ! (( dup_found )); then
            if [[ $REPLY == $1 ]]; then
                dup_found=1
                continue 2
            fi
        fi
        printf '%s\n' "$REPLY"
    done < "$hist" >> "$temp"

    mv "$temp" "$hist"
}

rm_non_exist() {
    # Remove non-existant files from history

    while read; do
        [[ -e "$REPLY" ]] && printf "$REPLY\n"
    done < "$hist" > "$temp"

    mv "$temp" "$hist"
}

## Cmd flags
case "$1" in
    '')
        # Pipe file into dmenu with indicators
        filename=$(printf '%s\n%s' "$indc_find" "$(
            while read; do
                if [[ -d $REPLY ]]; then
                    printf "$indc_dir $REPLY\n"
                elif [[ -h $REPLY ]]; then
                    printf "$indc_link $REPLY\n"
                else
                    printf "$REPLY\n"
                fi
            done < "$hist"   
        )" | "${cmd_dmenu[@]}" )

        if [[ $filename == $indc_find ]]; then
            filename=$(${cmd_find[@]} | "${cmd_dmenu[@]}")
            [[ -z $filename ]] && err 'Empty selection'
        else
            [[ -z $filename ]] && err 'Empty selection'

            # Remove potential indicators
            filename=${filename#"$indc_dir "}
            filename=${filename#"$indc_link "}

            # If the file doesn't exist clean history and error out
            if ! [[ -e $filename ]]; then
                rm_non_exist
                err "$filename does not exist"
            fi
        fi

        entry "$filename"

        "${cmd_editor[@]}" "$filename" ;;

    --open|-o)
        # Absolute path to specified file
        case "$2" in
            '')
                "${cmd_editor[@]}"
                exit ;;
            .)
                filename="$PWD" ;;
            ..)
                cwd="${PWD##*/}"
                filename="${PWD%/$cwd}" ;;
            *)
                filename="$PWD/${2##*/}" ;;
        esac

        entry "$filename"

        "${cmd_editor[@]}" "$filename" ;;

    --purge|-p)
        read -p "Delete $hist? [y/n]: " del
        case "$del" in
            y|Y|yes|Yes|YES) rm -v "$hist" ;;
        esac ;;

    --clean|-c)
        rm_non_exist ;;

    --help|-h)
        read  -d '' helptext <<- 'EOF'
			Usage (long options):

			1) Open a new file (or directory) from cmd-line:
			$ dmenu-editor-history --open example.txt
			(intented to be run via a shell alias)

			2) Open a previously opened file or search for a new one from dmenu:
			$ dmenu-editor-history
			(intented to be run via a custom hotkey)

			Clear history:
			$ dmenu-editor-history --purge

			Remove all files from history that does not exist:
			$ dmenu-editor-history --clean
			(this also runs if a non-existant file is selected from dmenu)

			Print out this help text:
			$ dmenu-editor-history --help
		EOF
        printf "$helptext\n" ;;

    *)
        err 'Invalid option(s), see --help for information about usage' ;;
esac
