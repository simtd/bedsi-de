#!/usr/bin/env bash

# TODO: figure out hidden files, link files, files with spaces in them
# files with spaces does get added multiple times!
# TODO: add a heredoc too --help so help text can be moved down there

# DMENU-EDITOR-HISTORY
# --------------------

# Provides a convinient workflow for quickly recalling previously opened files
# from dmenu, see --help for usage

# CHANGE EDITOR AND DMENU COMMANDS TO SUIT YOUR NEEDS!
editor_cmd=(subl)
dmenu_cmd=(fzfmenu "--prompt='Hist > '")

help='Usage (long options):

1) Open a new file (or directory) from cmd-line:
   $ dmenu-editor-history --open example.txt
   (intented to be run via a shell alias)

2) Open a previously opened file from dmenu:
   $ dmenu-editor-history
   (intented to be run via a custom hotkey)

   Clear history:
   $ dmenu-editor-history --purge

   Automatically create a history from some files/directories in $HOME:
   $ dmenu-editor-history --fill

   Remove all files from history that does not exits:
   $ dmenu-editor-history --clean
   (this also runs if a non-existent file is selected from dmenu)

   Print out this help text:
   $ dmenu-editor-history --help'

err() {
    printf "ERROR: $1!\n" 1>&2
    exit 1
}

# File to store history in
if [[ -d $XDG_CACHE_HOME ]]; then
    histfile="$XDG_CACHE_HOME/dmenu-editor-history"
elif [[ -d $HOME ]]; then
    histfile="$HOME/.dmenu-editor-history"
else
    err 'XDG_CACHE_HOME or HOME environment variable needs to be set'
fi
[[ -f $histfile ]] || touch "$histfile"

temphist='/tmp/dmenu-editor-history-tmp'

append_dir() {
    # Append filenames from a directory to a file

    # Parameters:
    # $1 = absolute path to a directory
    # $2 = file to append to
    # $3 = number of directories to descend (depth)

    for f in "$1"/*; do
        if [[ -f $f ]]; then
            printf "$f\n"
        elif [[ -d $f ]]; then
            printf "$f\n"
            [[ $3 -gt 0 ]] && append_dir "$f" "$2" $(($3-1))
        fi
    done >> "$2"
}

new_item() {
    # New history item

    # Parameters:
    # $1 = absolute path to a file

    printf "$1\n" > "$temphist" 

    # If a directory also add the files inside because that's what I like
    # (only regular files in first depth, not recursive)
    [[ -d $1 ]] && append_dir "$1" "$temphist" 0

    # Adding previous part of history without duplicates of new items
    while read; do
        for item in $(< $temphist); do
            [[ $REPLY == $item ]] && continue 2
        done
        printf "$REPLY\n"
    done < "$histfile" >> "$temphist"

    mv "$temphist" "$histfile"
}

rm_non_exist() {
    # Remove non-existant files from history

    while read; do
        [[ -f "$REPLY" ]] && printf "$REPLY\n"
    done < "$histfile" > "$temphist"

    mv "$temphist" "$histfile"
}

## Cmd arguments
case "$1" in
    '')
        dir_indicator='[DIR]'

        # Pipe file into dmenu with indicator for directories
        filename="$(
            while read; do
                if [[ -d $REPLY ]]; then
                    printf "$dir_indicator $REPLY\n"
                else
                    printf "$REPLY\n"
                fi
            done < "$histfile" | "${dmenu_cmd[@]}"
        )"

        [[ -z $filename ]] && err 'empty selection'

        filename=${filename/"$dir_indicator" /}

        # If the file doesn't exist clean history and error out
        if ! [[ -e $filename ]]; then
            rm_non_exist
            err "$filename does not exist"
        fi

        new_item "$filename"
        "${editor_cmd[@]}" "$filename" ;;

    --open|-o)
        # Absolute path to specified file
        case "$2" in
            '')
                "${editor_cmd[@]}"
                exit ;;
            .)
                filename="$PWD" ;;
            ..)
                cwd="${PWD##*/}"
                filename="${PWD%/$cwd}" ;;
            *)
                filename="$PWD/${2##*/}" ;;
        esac

        new_item "$filename"
        "${editor_cmd[@]}" "$filename" ;;

    --purge|-p)
        read -p "delete $histfile? [y/n]: " del
        case "$del" in
            y|Y|yes|Yes|YES) rm -v "$histfile" ;;
        esac ;;

    --clean|-c)
        rm_non_exist ;;

    --fill|-f)
        read -p "replace $histfile? [y/n]: " rep
        case "$rep" in
            y|Y|yes|Yes|YES)
                
                [[ -d $HOME ]] || err 'HOME environment variable not defined'

                > "$temphist"
                
                # Adding files from home directory
                append_dir "$HOME" "$temphist" 0

                # Recursively adding files from useful directories
                recdirs+="$HOME/.local/bin "
                recdirs+="$HOME/.local/src "
                recdirs+="$HOME/.config"
                for d in $recdirs; do
                    [[ -d $d ]] && append_dir "$d" "$temphist" 1
                done

                mv "$temphist" "$histfile" ;;
        esac ;;

    --help|-h)
        printf "$help\n" ;;

    *)
        err 'invalid option(s), see --help for information about usage' ;;
esac